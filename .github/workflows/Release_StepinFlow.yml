# This workflow creates a portable release in "Releases".


name: Release StepinFlow

on:
   workflow_dispatch: # Allows manual triggering of the workflow.
   
jobs:
  build:
    runs-on: windows-latest 
    strategy:
      matrix:
        configuration: [Release]
                            
    env:
      Solution_Name: StepinFlow.sln                         
      Publish_Directory: publish_output

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Extract Version from .csproj
      run: |
         $version = (Select-String -Path StepinFlow/StepinFlow.csproj -Pattern '<Version>(.*?)</Version>' | ForEach-Object { $_.Matches.Groups[1].Value }) ?? "1.0.0"
         $artifactName = "StepinFlow-Portable-win-x64-v$version.zip"
         $tagName = "v$version"                                      # Create tag name with 'v' prefix
         Write-Host "Artifact Name: $artifactName"
         Write-Host "Tag Name: $tagName"
         echo "ARTIFACT_NAME=$artifactName" >> $env:GITHUB_ENV
         echo "TAG_NAME=$tagName" >> $env:GITHUB_ENV                 # Export tag name
      shell: pwsh

    - name: Restore the application
      run: dotnet restore $env:Solution_Name

    - name: Build the application
      run: dotnet build $env:Solution_Name --configuration Release --no-restore

    - name: Publish the application
      run: dotnet publish $env:Solution_Name --configuration Release --runtime win-x64 --self-contained true --output $env:Publish_Directory

    - name: Zip the published files
      run: Compress-Archive -Path $env:Publish_Directory\* -DestinationPath $env:ARTIFACT_NAME
      shell: pwsh

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_NAME }}
        release_name: Release ${{ env.TAG_NAME }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.ARTIFACT_NAME }}
        asset_name: ${{ env.ARTIFACT_NAME }}
        asset_content_type: application/zip
